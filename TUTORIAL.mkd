Web Technologies Tutorial
=========================

Welcome to the web! The goal of this tutorial is to give you an opportunity to learn the basics of the building-block technologies of web applications: HTML, CSS, and Javascript. We're going to approach these from a very practical perspective - there will be very little "teaching" per se, and lots of hands on learning through doing. Hopefully it will be fun, and prepare you to do web-based projects of your own!


What We're Building
-------------------

We're going to build a simple application that will get you some experience working with the major technologies you'll need for prototyping. It's designed to integrate with the Arduino project, so if you do both of them you'll have a simple web application that can get data from an Arduino, display it on a web page, and send messages back to the Arduino.

You're going to be building a dashboard that can show you the location and status of 5 different sensors around the city of Pune. We'll show the sensors' locations with a Google Maps. Each sensor has a button and a motion sensor on it, and every time someone walks in front of the sensor you'll get a message. The sensors also have a "like" button on them, and when someone presses that button you'll get a message, too. Every time you get one of these messages from a sensor, you'll display it on the dashboard page. Also, when you click on the sensors on the map, it should open a little window that shows you how many times people have walked in front of the sensor and how many times people have pressed the button.

Think of the sensors as being placed on, maybe, an advertisement in a mall, and you might be curious about how much activity there is in front of each advertisement in real time. 

The final version of what you're going to build is going to look something like the one I made, which you can see here:

    http://toqbot.com/india/living-mobile-tutorial/web/

Getting Started
---------------

We need to get your programming environment set up, first. You'll be writing code locally on your own personal computer and then uploading it to a server for testing. These instructions assume you're using Windows. If you're using Linux or OS X, let me know and I can translate these instructions for you.

	1. Download WinSCP.
	2. Connect to our server:
		indiamobile.media.mit.edu
		login: student
		password: (ask instructor)
	3. Choose a team name. We'll refer to that name as <TEAM NAME> for the rest of this document.
	4. Make a directory for your work called /home/student/<TEAM NAME>/
		All your work will go in this folder. 
	5. Copy the _contents_ of the "start" directory (it's at the same level as this TUTORIAL file) to your directory on the server. This is the starting point for the tutorial.

Now that the initial setup is on the server, you can test it out! Your url will be:

    http://toqbot.com/india/student/<TEAM NAME>/

When you go there, you should see a simple webpage with just a header and some other text. If that doesn't work, find the instructor and he'll help you figure it out.

At this point, you can either edit the files directly on the server using WinSCP, or you can use Notepad++ to edit them on your computer and then copy them to the server every time you want to test. It's up to you. 

Tools
-----

Every browser has its own quirks. I developed this using Chrome, and you probably should too. It has a nice integrated debugger and I know all of this will work in it. If you really want to use Firefox, that's fine too - make sure to download the Firebug extension with it. You should definitely not be using Internet Explorer. It's unreliable and very hard to develop with.

To get to the debugger in Chrome, just right click anywhere on the page and choose "Inspect Element". That will open the debugger. You can use this to explore the page's current contents (called "Elements" in this interface), inspect your scripts, and execute your own arbitrary Javascript in the "Console" tab. Feel free to play around with this interface! You can do all kinds of stuff like add breakpoints, set watch expressions, and profile the performance of your code. We don't need to go too deep into this, but I would suggest that you make heavy use of the Console for testing out your javascript expressions and inspecting the of the program when you've paused it with a breakpoint.

General Advice
--------------

This tutorial is very light on technical specifics. You're going to have to teach yourself how to do things because I'm not going to tell you explicitly. Don't be afraid to rely heavily on google - that's what I do! If you've never written any Javascript before, don't be afraid to just google "javascript functions" or "javascript for loop" or whatever to figure out the pieces you need. The same goes for HTML and CSS. If you don't know how CSS works, just look it up! These systems aren't super complicated, and most of what you need to know you can pick up quickly by looking at how other websites work or by reading tutorials. If you get really stuck, though, do let me know and I can help get you un-stuck.

At any point, you can also check out my final solution page (linked at the top of the document), or use one of the step-by-step solutions included in this folder. It's better to keep making progress rather than getting stuck on something early on and not making it all the way through. By the end, I'm more concerned with you knowing what's possible and feeling confident that you can figure it out than being a super javascript+html+css expert.

Google Maps!
------------

The first step is to add a Google Maps view to your webpage. You can learn how to do this from Google's documentation: 

    http://code.google.com/apis/maps/documentation/javascript/

They have a helpful tutorial here, too:

    http://code.google.com/apis/maps/documentation/javascript/tutorial.html

You're not going to want to just copy that exactly - try to make it look like the target application. You'll need to figure out how to size it, how to make it center on Pune instead of Sydney, and a few other things. 

Pins Everywhere
---------------

The next step is to gets pins to show up on the map. You can find some information about markers here:

    http://code.google.com/apis/maps/documentation/javascript/overlays.html#Markers

I've defined a sensor variable for you already, so you don't have to work out all the latitudes and longitudes yourself - you'll need to figure out how to create markers for each of those locations.

To help debug this process, you can use the following function to write debugging information out to the Console (remember, right click and select "Inspect Element" to bring it up):

    console.log("Hello world!");

You can, of course, also output variables like this:

    var foo = 1;
    console.log("foo=" + foo);

There's one last twist - if you're trying to output a dictionary object, you can't do it the same way as above, eg:

    var foo = {"id":1};
    console.log("foo=" + foo);

will output "foo=[Object object]" because foo is an object instead of a primitive (eg a number or a string). In that situation, do it this way instead:

    var foo = {"id":1};
    console.log("foo:");
    console.log(foo);

The console.log function is tricky - if it senses an object, it will actually give you a little interactive tool for exploring that object. You can try entering the above code directly in the Console and see what happens. 

Networking
----------

Now it's time to start thinking about how to update the page in response to messages from the sensors. Basically, we're going to write a function that runs every time we get a message from the server. We're going to use a system called Toqbot to handle these messages. If you had trouble with the previous section, you can grab the 'networking' version of the code and have a fresh version of the code that is at this point in the tutorial.

You can think of Toqbot as, basically, a series of chatrooms. Each room has a name, and you can tell the system to call a particular function every time someone says something in the chat room. 

Since you don't actually have an Arduino board with you, we're going to fake the messages from the sensors using a test page:

http://toqbot.com/india/student/<TEAM NAME>/sensors.html
	
We need to tell it what the name of your room is, though. Open up the sensors.html file and look for "CHANNEL_PREFIX" and set that to <TEAM NAME> so you have a channel that's used only by your team. Otherwise, your messages will be colliding with other teams' messages.

Now, jump back to your main page. Add this code in to your main document.ready() function.

    toq.subscribe("<TEAM NAME>" + "_update", function(doc) {
    	// This function gets executed every time there is a message
    	// on the specified channel.
    	//doc is a "document" object that captures current state of 
    	//		the key/value
    	//doc.key = 'drewtest'
    	//doc.time = the server time stamp
    	//doc.rev = the revision number
    	//doc.user = a unique string for each user
    	//		(based on a cookie value)
    	//doc.data = the actual value update
    	var message = eval("(" + doc.data + ")");
    
    	// Your code goes here!
    });
    
    toq.connect();

This function runs every time you get a message. Try it out now - add a console.log message in the function, then load up the sensors.html page and press the buttons - every time you press a button, you should see a message in the logs of your index.html page. You can also look at recent messages on the channel directly by going to:

http://toqbot.com/<TEAM NAME>_update
	
You can post messages there, too, using the text field at the bottom. This is a nice way to make sure message are getting through properly.

Now that network is all hooked up, it's time to make something happen on the page when you get a message!


Updating the DOM
----------------

The first thing we want to do in response to a message from a sensor is add a record of that message to the page.

At this point, you'll need to do a little HTML and CSS learning on your own. What we want to do is create a new `<div>` object that will hold all your messages. Inside that, we're going to add a `<div>` object every time we get a message that has some information about that message like when it was received, which sensor it was for, and which kind of message it was. You can take a look at my finished solution (linked at the top of this document) to see what I'm talking about. 
	
This process is going to have two steps. First, you'll need to add the container `<div>` to your page, below the google maps div that you created earlier. Then, you'll want to programmatically add new `<div>`s inside that one every time you get a message from the sensors. Remember, you'll need to trigger those messages yourself with the sensor.html test page.
	
You're going to want to use jQuery's append method to do this. The jQuery library is already included in your page - don't worry about that part. Learn more about the append function here:

    http://api.jquery.com/append/

You might also need to use jQuery's main multi-purpose function $(). You can use it for lots of things, but the two purposes you'll likely need are:

	1. $("foo") returns the HTML element with the id "foo"
	2. $("<div>hello!</div>") creates an HTML element from the string, that you can then append to, or append it to some other HTML object. For instance, something turned by $("foo").
	
You can read about it here:

    http://api.jquery.com/jQuery/
    look for jQuery( selector, [ context ] ) and jQuery( html, [ ownerDocument ])

Once you can add a `<div>` in response to each message, try changing the color and making it look good by adding a margin and a border and a background color. You'll need to learn about "CSS selectors" plus classes and ids in HTML to make this work. Look at my solution page to get a sense of how you should make it look.


Updating The Map
----------------

Now that we're responding properly to data, it's time to get back to the map.

First, you should figure out how to make the markers jump when you get a message from the appropriate sensor. You can read about how to make animations happen here:

    http://code.google.com/apis/maps/documentation/javascript/overlays.html#MarkerAnimations

You might have trouble getting them to STOP bouncing. You can use "setTimeout" to help with that.

Next, we want a little window to appear when you click on the marker that tells you how many time we've gotten each kind of message from that sensor. This is handled largely by the GoogleMaps API itself, and you can read that section here:

    http://code.google.com/apis/maps/documentation/javascript/overlays.html#InfoWindows

The tricky part is going to keeping track of how many of each kind of message you've received (you're going to want to create a data structure for that - either a list or a dictionary) and updating the InfoWindow appropriately. This is much harder than anything else you've had to do so far, so don't worry if you get stuck. This blog post might be helpful:

    http://you.arenot.me/2010/06/29/google-maps-api-v3-0-multiple-markers-multiple-infowindows/

You should try decomposing the problem into steps. Start by making sure you can accumulate the number of button presses associated with each sensor id. Then get an empty infowindow to appear when you click. Then try to put the right data into the right infowindow.

Done!
-----

And that's it! You're done!

If you got done quickly, here are some bonus tasks you can take on:

	- Color the messages in the recent-event window based on what type they are. 
	- If an infowindow is open when a message comes in, it doesn't update its text. See if you can figure out how to make that happen.
	- Think about how you would send a message back to the arduino. Look into the <button> object that triggers a message (using console.log) whenever you press it. Then try using toq.write(CHANNEL_NAME, MESSAGE) to write a message to your communication channel.
