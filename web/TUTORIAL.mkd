Web Technologies Tutorial
=========================

Welcome to the web! The goal of this tutorial is to give you an opportunity to learn the basics of the building-block technologies of web applications: HTML, CSS, and Javascript. We're going to approach these from a very practical perspective - there will be very little "teaching" per se, and lots of hands on learning through doing. Hopefully it will be fun, and prepare you to do web-based projects of your own!


What We're Building
-------------------

We're going to build a simple application that will get you some experience working with the major technologies you'll need for prototyping. It's designed to integrate with the Arduino project, so if you do both of them you'll have a simple web application that can get data from an Arduino, display it on a web page, and send messages back to the Arduino.

You're going to be building a dashboard that can show you the location and status of 5 different sensors around the city of Pune. We'll show the sensors' locations with a Google Maps. Each sensor has a button and a motion sensor on it, and every time someone walks in front of the sensor you'll get a message. The sensors also have a "like" button on them, and when someone presses that button you'll get a message, too. Every time you get one of these messages from a sensor, you'll display it on the dashboard page. Also, when you click on the sensors on the map, it should open a little window that shows you how many times people have walked in front of the sensor and how many times people have pressed the button.

Think of the sensors as being placed on, maybe, an advertisement in a mall, and you might be curious about how much activity there is in front of each advertisement in real time. 

The final version of what you're going to build is going to look something like the one I made, which you can see here:

http://toqbot.com/india/living-mobile-tutorial/web/

Getting Started
---------------

We need to get your programming environment set up, first. You'll be writing code locally on your own personal computer and then uploading it to a server for testing. These instructions assume you're using Windows. If you're using Linux or OS X, let me know and I can translate these instructions for you.

	1. Download WinSCP.
	2. Connect to our server:
		indiamobile.media.mit.edu
		login: student
		password: (ask instructor)
	3. Choose a team name. We'll refer to that name as <TEAM NAME> for the rest of this document.
	4. Make a directory for your work called /home/student/<TEAM NAME>/
		All your work will go in this folder. 
	5. Copy the _contents_ of the "start" directory (it's at the same level as this TUTORIAL file) to your directory on the server. This is the starting point for the tutorial.

Now that the initial setup is on the server, you can test it out! Your url will be:

http://toqbot.com/india/student/<TEAM NAME>/

When you go there, you should see a simple webpage with just a header and some other text. If that doesn't work, find the instructor and he'll help you figure it out.

At this point, you can either edit the files directly on the server using WinSCP, or you can use Notepad++ to edit them on your computer and then copy them to the server every time you want to test. It's up to you. 

Tools
-----

Every browser has its own quirks. I developed this using Chrome, and you probably should too. It has a nice integrated debugger and I know all of this will work in it. If you really want to use Firefox, that's fine too - make sure to download the Firebug extension with it. You should definitely not be using Internet Explorer. It's unreliable and very hard to develop with.

To get to the debugger in Chrome, just right click anywhere on the page and choose "Inspect Element". That will open the debugger. You can use this to explore the page's current contents (called "Elements" in this interface), inspect your scripts, and execute your own arbitrary Javascript in the "Console" tab. Feel free to play around with this interface! You can do all kinds of stuff like add breakpoints, set watch expressions, and profile the performance of your code. We don't need to go too deep into this, but I would suggest that you make heavy use of the Console for testing out your javascript expressions and inspecting the of the program when you've paused it with a breakpoint.

Google Maps!
------------

The first step is to add a Google Maps view to your webpage. You can learn how to do this from Google's documentation: 

http://code.google.com/apis/maps/documentation/javascript/

They have a helpful tutorial here, too:

http://code.google.com/apis/maps/documentation/javascript/tutorial.html

You're not going to want to just copy that exactly - try to make it look like the target application. You'll need to figure out how to size it, how to make it center on Pune instead of Sydney, and a few other things. 

Pins Everywhere
---------------

The next step is to gets pins to show up on the map. You can find some information about markers here:

http://code.google.com/apis/maps/documentation/javascript/overlays.html#Markers

I've defined a sensor variable for you already, so you don't have to work out all the latitudes and longitudes yourself - you'll need to figure out how to create markers for each of those locations.

To help debug this process, you can use the following function to write debugging information out to the Console (remember, right click and select "Inspect Element" to bring it up):

 console.log("Hello world!");

You can, of course, also output variables like this:

 var foo = 1;
 console.log("foo=" + foo);

There's one last twist - if you're trying to output a dictionary object, you can't do it the same way as above, eg:

 var foo = {"id":1};
 console.log("foo=" + foo);

will output "foo=[Object object]" because foo is an object instead of a primitive (eg a number or a string). In that situation, do it this way instead:

 var foo = {"id":1};
 console.log("foo:");
 console.log(foo);

The console.log function is tricky - if it senses an object, it will actually give you a little interactive tool for exploring that object. You can try entering the above code directly in the Console and see what happens. 

Networking & the DOM
--------------------

Now it's time to start thinking about how to update the page in response to messages from the sensors. 

Since you don't actually have an Arduino board with you, we're going to fake the messages from the sensors using a test page:

http://toqbot.com/india/student/<TEAM NAME>/sensors.html